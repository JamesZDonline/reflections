What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, it creates a hidden file called .git which is used to store metadata necessary for version control. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area may only contain some of the files in the working directory. Unlike the repository, it does not track previous versions of the file, instead it simply records which of the files are currently being tracked by the repository. This allows you to control what commits you make when.


How can you use the staging area to make sure you have one commit per logical change?

By using the commands git diff or git diff --staged, it is possible to see the changes that are occuring within a particular file before it is committed. At that point, if everything looks like it is part of a single logical change, it is possible to decide what exactly to commit and what not to.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could help when wanting to test out adding some new features to a project without modifying the original. It could especially be helpful if one was collaborating on a project, so different people could add different things and then maybe find a way to merge the branches back together as was alluded to in the video.
